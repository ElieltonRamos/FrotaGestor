diff --git a/frontend/src/app/components/header/header.ts b/frontend/src/app/components/header/header.ts
index 1f5734b..dd72255 100644
--- a/frontend/src/app/components/header/header.ts
+++ b/frontend/src/app/components/header/header.ts
@@ -1,5 +1,5 @@
 import { Component, inject } from '@angular/core';
-import { UserService } from '../../services/user-service';
+import { UserService } from '../../services/user.service';
 import { Router } from '@angular/router';
 
 @Component({
diff --git a/frontend/src/app/guards/auth-guard.ts b/frontend/src/app/guards/auth-guard.ts
index 0367c9a..22ecf64 100644
--- a/frontend/src/app/guards/auth-guard.ts
+++ b/frontend/src/app/guards/auth-guard.ts
@@ -1,6 +1,6 @@
 import { inject } from '@angular/core';
 import { CanActivateFn, Router } from '@angular/router';
-import { UserService } from '../services/user-service';
+import { UserService } from '../services/user.service';
 
 export const authGuard: CanActivateFn = (route, state) => {
   const userService = inject(UserService);
diff --git a/frontend/src/app/guards/jwt-interceptor.ts b/frontend/src/app/guards/jwt-interceptor.ts
index c76bb8d..5f74c2e 100644
--- a/frontend/src/app/guards/jwt-interceptor.ts
+++ b/frontend/src/app/guards/jwt-interceptor.ts
@@ -1,5 +1,16 @@
 import { HttpInterceptorFn } from '@angular/common/http';
 
 export const jwtInterceptor: HttpInterceptorFn = (req, next) => {
+  const token = localStorage.getItem('auth_token');
+  
+  if (token) {
+    const cloned = req.clone({
+      setHeaders: {
+        Authorization: `Bearer ${token}`,
+      },
+    });
+    return next(cloned);
+  }
+
   return next(req);
 };
diff --git a/frontend/src/app/interfaces/driver.ts b/frontend/src/app/interfaces/driver.ts
index 5eac5f9..774203c 100644
--- a/frontend/src/app/interfaces/driver.ts
+++ b/frontend/src/app/interfaces/driver.ts
@@ -1,15 +1,16 @@
 export interface Driver {
   id?: number;
-  nome: string;
+  name: string;
   cpf: string;
   cnh: string;
-  categoriaCnh?: string;
-  validadeCnh?: Date;
-  telefone?: string;
+  cnhCategory?: string;
+  cnhExpiration?: Date;
+  phone?: string;
   email?: string;
   status: DriverStatus;
+  deletedAt?: Date;
 }
 
-export type DriverStatus = 'Ativo' | 'Inativo';
+export type DriverStatus = 'ATIVO' | 'INATIVO';
 
 
diff --git a/frontend/src/app/pages/change-password/change-password.ts b/frontend/src/app/pages/change-password/change-password.ts
index c4ae228..0df9f3a 100644
--- a/frontend/src/app/pages/change-password/change-password.ts
+++ b/frontend/src/app/pages/change-password/change-password.ts
@@ -1,7 +1,13 @@
 import { Component, inject } from '@angular/core';
-import { FormBuilder, ReactiveFormsModule, Validators, ValidationErrors, AbstractControl } from '@angular/forms';
+import {
+  FormBuilder,
+  ReactiveFormsModule,
+  Validators,
+  ValidationErrors,
+  AbstractControl,
+} from '@angular/forms';
 import { alertError, alertSuccess } from '../../utils/custom-alerts';
-import { UserService } from '../../services/user-service';
+import { UserService } from '../../services/user.service';
 
 @Component({
   selector: 'app-change-password',
@@ -20,7 +26,9 @@ export class ChangePassword {
     { validators: this.passwordsMatchValidator }
   );
 
-  private passwordsMatchValidator(control: AbstractControl): ValidationErrors | null {
+  private passwordsMatchValidator(
+    control: AbstractControl
+  ): ValidationErrors | null {
     const newPassword = control.get('newPassword')?.value;
     const confirmPassword = control.get('confirmPassword')?.value;
 
diff --git a/frontend/src/app/pages/login/login.ts b/frontend/src/app/pages/login/login.ts
index 8d40419..077ef22 100644
--- a/frontend/src/app/pages/login/login.ts
+++ b/frontend/src/app/pages/login/login.ts
@@ -1,7 +1,7 @@
 import { ChangeDetectorRef, Component, inject } from '@angular/core';
 import { FormsModule } from '@angular/forms';
 import { Router } from '@angular/router';
-import { UserService } from '../../services/user-service';
+import { UserService } from '../../services/user.service';
 import { alertError } from '../../utils/custom-alerts';
 
 @Component({
@@ -22,20 +22,19 @@ export class Login {
   login() {
     this.isLoading = true;
 
-    this.userService.login(this.username, this.password)
-      .subscribe({
-        next: (res) => {
-          this.isLoading = false;
-          this.cdr.detectChanges();
-          localStorage.setItem('auth_token', res.token)
-          this.router.navigate(['/menu']);
-        },
-        error: (err) => {
-          this.isLoading = false;
-          this.cdr.detectChanges();
-          const backendMessage = err.error?.message || 'Erro inesperado';
-          alertError(`Erro ao fazer login: ${backendMessage}`);
-        }
-      });
+    this.userService.login(this.username, this.password).subscribe({
+      next: (res) => {
+        this.isLoading = false;
+        this.cdr.detectChanges();
+        localStorage.setItem('auth_token', res.token);
+        this.router.navigate(['/menu']);
+      },
+      error: (err) => {
+        this.isLoading = false;
+        this.cdr.detectChanges();
+        const backendMessage = err.error?.message || 'Erro inesperado';
+        alertError(`Erro ao fazer login: ${backendMessage}`);
+      },
+    });
   }
 }
diff --git a/frontend/src/app/pages/motorista/list-driver/list-driver.html b/frontend/src/app/pages/motorista/list-driver/list-driver.html
index df9fc30..422ea48 100644
--- a/frontend/src/app/pages/motorista/list-driver/list-driver.html
+++ b/frontend/src/app/pages/motorista/list-driver/list-driver.html
@@ -9,7 +9,7 @@
           type="text"
           placeholder="Nome..."
           class="px-3 py-2 rounded border bg-gray-50 text-sm"
-          [(ngModel)]="filter.nome"
+          [(ngModel)]="filter.name"
           (ngModelChange)="applyFilters()"
         />
       </div>
@@ -33,8 +33,8 @@
           (change)="applyFilters()"
         >
           <option value="">Todos</option>
-          <option value="Ativo">Ativo</option>
-          <option value="Inativo">Inativo</option>
+          <option value="ATIVO">Ativo</option>
+          <option value="INATIVO">Inativo</option>
         </select>
       </div>
 
@@ -70,9 +70,9 @@
         <tr>
           <th
             class="px-4 py-3 cursor-pointer select-none"
-            (click)="sortBy('nome')"
+            (click)="sortBy('name')"
           >
-            Nome @if(sortKey === 'nome') { {{ sortAsc ? "▲" : "▼" }} }
+            Nome @if(sortKey === 'name') { {{ sortAsc ? "▲" : "▼" }} }
           </th>
           <th
             class="px-4 py-3 cursor-pointer select-none"
@@ -96,18 +96,18 @@
         </tr>
       </thead>
       <tbody class="divide-y divide-gray-100">
-        @for (m of drivers; track m.cpf) {
+        @for (m of drivers; track m.id) {
         <tr class="hover:bg-gray-50 odd:bg-white even:bg-gray-50">
-          <td class="px-4 py-3">{{ m.nome }}</td>
+          <td class="px-4 py-3">{{ m.name }}</td>
           <td class="px-4 py-3">{{ m.cpf }}</td>
           <td class="px-4 py-3">{{ m.cnh }}</td>
           <td class="px-4 py-3">
             <span
               class="px-2 py-1 text-xs rounded-full"
-              [class.bg-green-100]="m.status === 'Ativo'"
-              [class.text-green-700]="m.status === 'Ativo'"
-              [class.bg-red-100]="m.status === 'Inativo'"
-              [class.text-red-700]="m.status === 'Inativo'"
+              [class.bg-green-100]="m.status === 'ATIVO'"
+              [class.text-green-700]="m.status === 'ATIVO'"
+              [class.bg-red-100]="m.status === 'INATIVO'"
+              [class.text-red-700]="m.status === 'INATIVO'"
             >
               {{ m.status }}
             </span>
@@ -119,18 +119,6 @@
             >
               Editar
             </button>
-            <button
-              class="px-3 py-1 text-xs font-medium text-white bg-gray-700 rounded hover:bg-gray-800"
-              (click)="toggleStatus(m)"
-            >
-              {{ m.status === "Ativo" ? "Inativar" : "Ativar" }}
-            </button>
-          </td>
-        </tr>
-        } @empty {
-        <tr>
-          <td colspan="5" class="px-4 py-6 text-center text-gray-500">
-            Nenhum motorista cadastrado
           </td>
         </tr>
         }
diff --git a/frontend/src/app/pages/motorista/list-driver/list-driver.ts b/frontend/src/app/pages/motorista/list-driver/list-driver.ts
index 7ddf7ab..3c96d77 100644
--- a/frontend/src/app/pages/motorista/list-driver/list-driver.ts
+++ b/frontend/src/app/pages/motorista/list-driver/list-driver.ts
@@ -1,28 +1,28 @@
-import { Component, OnInit, inject } from '@angular/core';
+import { ChangeDetectorRef, Component, inject } from '@angular/core';
 import { FormsModule } from '@angular/forms';
 import { Driver } from '../../../interfaces/driver';
-import { DriverService } from '../../../services/driver-service';
+import { DriverService } from '../../../services/driver.service';
 import { PaginatedResponse } from '../../../interfaces/paginator';
 import { PaginatorComponent } from '../../../components/paginator/paginator.component';
 import { ModalEditComponent } from '../../../components/modal-edit-component/modal-edit-component';
 
 @Component({
   selector: 'app-list-driver',
-  standalone: true,
   imports: [FormsModule, PaginatorComponent, ModalEditComponent],
   templateUrl: './list-driver.html',
 })
 export class ListDriver {
   private serviceDriver = inject(DriverService);
+    private cdr = inject(ChangeDetectorRef);
   driverFields = [
-    { name: 'nome', label: 'Nome', type: 'text', required: true },
+    { name: 'name', label: 'Nome', type: 'text', required: true },
     { name: 'cpf', label: 'CPF', type: 'text', required: true },
     { name: 'cnh', label: 'CNH', type: 'text', required: true },
     {
       name: 'status',
       label: 'Status',
       type: 'select',
-      options: ['Ativo', 'Inativo'],
+      options: ['ATIVO', 'INATIVO'],
     },
     { name: 'email', label: 'Email', type: 'email' },
     { name: 'telefone', label: 'Telefone', type: 'text' },
@@ -31,52 +31,52 @@ export class ListDriver {
   drivers: Driver[] = [];
   total = 0;
   page = 1;
-  limit = 5;
-  totalPages = 0;
+  limit = 10;
+  totalPages = 1;
   selectedDriver?: Driver;
   showModal = false;
 
   // filtros
   filter = {
-    nome: '',
+    name: '',
     cpf: '',
     status: '',
   };
 
   // ordenação
-  sortKey: keyof Driver = 'nome';
+  sortKey: keyof Driver = 'name';
   sortAsc = true;
 
-  ngOnInit(): void {
-    this.drivers = [
-      {
-        id: 1,
-        nome: 'John Doe',
-        cpf: '123.456.789-00',
-        cnh: '123456789012345678',
-        status: 'Ativo',
-        categoriaCnh: 'AB',
-        email: 'teste@email.com',
-        telefone: '38988663580',
-      },
-    ];
+  ngOnInit() {
+    this.listDrivers(1, 10);
   }
 
-  listDrivers(page: number = this.page, limit: number = this.limit) {
-    this.serviceDriver
-      .getAll(page, limit, this.filter, this.sortKey, this.sortAsc)
-      .subscribe((res: PaginatedResponse<Driver>) => {
+
+listDrivers(page: number, limit: number) {
+  this.serviceDriver
+    .getAll(page, limit, this.filter, this.sortKey, this.sortAsc)
+    .subscribe({
+      next: (res: PaginatedResponse<Driver>) => {
         this.drivers = res.data;
         this.total = res.total;
         this.page = res.page;
         this.limit = res.limit;
         this.totalPages = res.totalPages;
-      });
-  }
+        this.cdr.detectChanges();
+      },
+      error: (err) => {
+        console.log('Erro ao carregar motoristas:', err);
+        this.drivers = [];
+        this.total = 0;
+        this.totalPages = 0;
+      },
+    });
+}
+
 
   applyFilters() {
     this.page = 1;
-    this.listDrivers();
+    this.listDrivers(this.page, this.limit);
   }
 
   sortBy(key: keyof Driver) {
@@ -86,20 +86,16 @@ export class ListDriver {
       this.sortKey = key;
       this.sortAsc = true;
     }
-    this.listDrivers();
+    this.listDrivers(this.page, this.limit);
   }
 
   clearFilters() {
-    this.filter = { nome: '', cpf: '', status: '' };
+    this.filter = { name: '', cpf: '', status: '' };
     this.applyFilters();
   }
 
   onPageChange(newPage: number) {
-    this.listDrivers(newPage);
-  }
-
-  toggleStatus(driver: Driver) {
-    driver.status = driver.status === 'Ativo' ? 'Inativo' : 'Ativo';
+    this.listDrivers(newPage, this.limit);
   }
 
   onEdit(driver: Driver) {
diff --git a/frontend/src/app/services/api-url.ts b/frontend/src/app/services/api-url.ts
deleted file mode 100644
index a0813b3..0000000
--- a/frontend/src/app/services/api-url.ts
+++ /dev/null
@@ -1 +0,0 @@
-export const API_URL = 'http://localhost:3001'
diff --git a/frontend/src/app/services/driver-service.ts b/frontend/src/app/services/driver-service.ts
deleted file mode 100644
index 02042aa..0000000
--- a/frontend/src/app/services/driver-service.ts
+++ /dev/null
@@ -1,59 +0,0 @@
-import { HttpClient, HttpParams } from '@angular/common/http';
-import { Injectable } from '@angular/core';
-import { Observable } from 'rxjs';
-import { Driver } from '../interfaces/driver';
-import { API_URL } from './api-url';
-import { PaginatedResponse } from '../interfaces/paginator';
-
-@Injectable({
-  providedIn: 'root',
-})
-export class DriverService {
-  constructor(private http: HttpClient) {}
-
-  create(driver: Omit<Driver, 'id'>): Observable<Driver> {
-    return this.http.post<Driver>(API_URL, driver);
-  }
-
-  getAll(
-  page: number = 1,
-  limit: number = 10,
-  filters: any = {},
-  sortKey: string = 'nome',
-  sortAsc: boolean = true
-): Observable<PaginatedResponse<Driver>> {
-  let params = new HttpParams()
-    .set('page', page.toString())
-    .set('limit', limit.toString())
-    .set('sort', sortKey)
-    .set('order', sortAsc ? 'asc' : 'desc');
-
-  if (filters.nome) {
-    params = params.set('nome', filters.nome);
-  }
-  if (filters.cpf) {
-    params = params.set('cpf', filters.cpf);
-  }
-  if (filters.status) {
-    params = params.set('status', filters.status);
-  }
-
-  return this.http.get<PaginatedResponse<Driver>>(API_URL, { params });
-}
-
-
-  // Buscar motorista por ID
-  getById(id: number | string): Observable<Driver> {
-    return this.http.get<Driver>(`${API_URL}/${id}`);
-  }
-
-  // Atualizar motorista
-  update(id: number | string, driver: Partial<Driver>): Observable<Driver> {
-    return this.http.put<Driver>(`${API_URL}/${id}`, driver);
-  }
-
-  // Deletar motorista
-  delete(id: number | string): Observable<void> {
-    return this.http.delete<void>(`${API_URL}/${id}`);
-  }
-}
diff --git a/frontend/src/app/services/user-service.ts b/frontend/src/app/services/user-service.ts
deleted file mode 100644
index f278d80..0000000
--- a/frontend/src/app/services/user-service.ts
+++ /dev/null
@@ -1,56 +0,0 @@
-import { HttpClient } from '@angular/common/http';
-import { Injectable } from '@angular/core';
-import { API_URL } from './api-url';
-import { Message, Token, TokenPayload } from '../interfaces/user';
-import * as jwt from 'jwt-decode';
-
-@Injectable({ providedIn: 'root' })
-export class UserService {
-  private tokenKey = 'auth_token';
-  private apiUrl = API_URL;
-
-
-  constructor(private client: HttpClient) {}
-
-  login(username: string, password: string) {
-    return this.client.post<Token>(`${this.apiUrl}/users/login`, {
-      username,
-      password,
-    });
-  }
-
-  changePassword(newPassword: string) {
-    const token = this.getToken() || '';
-
-    const decodedToken = jwt.jwtDecode<TokenPayload>(token);
-    const userId = decodedToken.userId;
-
-    return this.client.patch<Message>(`${this.apiUrl}/users/update/${userId}`, {
-      password: newPassword,
-    })
-  }
-  
-  logout() {
-    localStorage.removeItem(this.tokenKey);
-  }
-
-  getToken(): string | null {
-    return localStorage.getItem(this.tokenKey);
-  }
-
-  isAuthenticated(): boolean {
-    return !!this.getToken();
-  }
-
-  getUserInfo(): TokenPayload | null {
-    const token = this.getToken();
-    if (!token) return null;
-
-    try {
-      return jwt.jwtDecode<TokenPayload>(token);
-    } catch (e) {
-      console.error('Erro ao decodificar token', e);
-      return null;
-    }
-  }
-}
